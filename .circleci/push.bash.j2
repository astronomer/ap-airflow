set -e
image="ap-airflow:<< parameters.tag >>"
set -x
export NEW_POINT_RELEASE=true

IFS="," read -ra DOCKER_TAGS \<<< "<< parameters.extra_tags >>"

echo "DOCKER_TAGS: ${DOCKER_TAGS[@]}"

if [[ "<< parameters.nightly_build >>" =~ (True|true) ]]; then
  # Docker tags must match [\w][\w.-]{0,127}
  # https://github.com/distribution/distribution/blob/514cbd71bedb3331f53e2fe5293075726c67e68a/reference/regexp.go#L41
  TAG_PRERELEASE_SUFFIX="-nightly-$(date +%Y%m%d)"
  echo "Adding '${TAG_PRERELEASE_SUFFIX}' to all docker tags"
  for (( i=0; i<{% raw %}${#DOCKER_TAGS[@]}{% endraw %}; i++ )); do
    DOCKER_TAGS[$i]=${DOCKER_TAGS[$i]}${TAG_PRERELEASE_SUFFIX}
  done
  echo "DOCKER_TAGS->  ${DOCKER_TAGS[@]}"
fi

# Read in more tags from the extra_tags_file, if it exists
if [[ -f "<< parameters.extra_tags_file >>" ]]; then
  echo "Contents of << parameters.extra_tags_file >>:"
  cat "<< parameters.extra_tags_file >>"

  while read tag;
  do
    DOCKER_TAGS+=($tag)
  done < "<< parameters.extra_tags_file >>"
fi

echo "DOCKER_TAGS:"
echo "${DOCKER_TAGS[@]}"

for tag in "${DOCKER_TAGS[@]}";
do
  if DOCKER_CLI_EXPERIMENTAL=enabled docker manifest inspect "<< parameters.prod_docker_repo_docker_hub >>:$tag" >/dev/null 2>&1; then
    echo "Image with Tag ("<< parameters.prod_docker_repo_docker_hub >>:$tag") already exists"
    export NEW_POINT_RELEASE=false

  elif [[ "$tag" == "<< parameters.tag >>-$CIRCLE_BUILD_NUM" ]] || <<parameters.dev_release >> ; then
    echo "Tagging and pushing image <<parameters.image_name>>:$tag to << parameters.dev_docker_repo_quay_io >>"
    docker tag "$image" "<< parameters.dev_docker_repo_quay_io >>:${tag}"
    docker push "<< parameters.dev_docker_repo_quay_io >>:${tag}"

    if [[ "${tag}" == *"onbuild-"* && <<parameters.dev_release >> ]]; then
      release="$( cut -d '-' -f 1 \<<< "$tag" )"
      sudo apt-get update && sudo apt-get install postgresql postgresql-contrib
      echo "UPSERT the latest tag '${tag}' for '${release}' into the QA DB"

      # Connect to the database, run the query, then disconnect
      PGPASSWORD="$QA_RELEASEINFO_PASSWORD" \
      psql --tuples-only \
           --no-align \
           --host="$QA_RELEASEINFO_HOST" \
           --port=5432 \
           --dbname="$QA_RELEASEINFO_DATABASE" \
           --username="$QA_RELEASEINFO_USERNAME" \
           --command="INSERT INTO tag_version (version_1,    latest_tag, previous_tag, is_latest)
                           VALUES             ('${release}', '${tag}',   NULL,         << parameters.edge_build >>)
                      ON CONFLICT (version_1)
                      DO UPDATE SET   latest_tag = EXCLUDED.latest_tag,
                                    previous_tag = tag_version.latest_tag;"
    fi

  else
    echo "Tagging and pushing image <<parameters.image_name>>:$tag to << parameters.prod_docker_repo_quay_io >>"
    docker tag "$image" "<< parameters.prod_docker_repo_quay_io >>:${tag}"
    docker push "<< parameters.prod_docker_repo_quay_io >>:${tag}"

    echo "Tagging and pushing image <<parameters.image_name>>:$tag to << parameters.prod_docker_repo_docker_hub >>"
    docker tag "$image" "<< parameters.prod_docker_repo_docker_hub >>:${tag}"
    docker push "<< parameters.prod_docker_repo_docker_hub >>:${tag}"

    echo "Tagging and pushing image <<parameters.image_name>>:$tag to << parameters.dev_docker_repo_quay_io >>"
    docker tag "$image" "<< parameters.dev_docker_repo_quay_io >>:${tag}"
    docker push "<< parameters.dev_docker_repo_quay_io >>:${tag}"

  fi
done

# The following code block publishes Moving Master builds (e.g. 1.10.13-buster-onbuild)
# as compared to above code-blocks that publish images with build-number & immutable tag
# e.g (e.g. 1.10.13-1-buster-onbuild and 1.10.13-buster-onbuild-24119)
if $NEW_POINT_RELEASE ; then
  if ! <<parameters.dev_release >> ; then
    # If it is not a Dev Release publish the image to Prod Repos
    echo "Tagging and pushing image <<parameters.image_name>>:<< parameters.tag >> to << parameters.prod_docker_repo_quay_io >>"
    docker tag "$image" "<< parameters.prod_docker_repo_quay_io >>:<< parameters.tag >>"
    docker push "<< parameters.prod_docker_repo_quay_io >>:<< parameters.tag >>"

    echo "Tagging and pushing image <<parameters.image_name>>:<< parameters.tag >> to << parameters.prod_docker_repo_docker_hub >>"
    docker tag "$image" "<< parameters.prod_docker_repo_docker_hub >>:<< parameters.tag >>"
    docker push "<< parameters.prod_docker_repo_docker_hub >>:<< parameters.tag >>"
  fi

  echo "Tagging and pushing image <<parameters.image_name>>:<< parameters.tag >> to << parameters.dev_docker_repo_quay_io >>"
  docker tag "$image" "<< parameters.dev_docker_repo_quay_io >>:<< parameters.tag >>"
  docker push "<< parameters.dev_docker_repo_quay_io >>:<< parameters.tag >>"
else
  echo "Image with Tag ($image) not pushed as it is not a new point release"
fi
set +x
