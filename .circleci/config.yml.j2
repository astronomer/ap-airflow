version: 2.1
workflows:
  version: 2.1
  certified-airflow:
    jobs:
{% for airflow_version, distributions in image_map.items() %}
{% for distribution in distributions %}
      - build:
          name: build-{{ airflow_version }}-{{ distribution }}
          airflow_version: {{ airflow_version }}
          distribution_name: {{ distribution }}
      - scan:
          name: scan-{{ airflow_version }}-{{ distribution }}-onbuild
          airflow_version: {{ airflow_version }}
          distribution_name: {{ distribution }}-onbuild
          requires:
            - build-{{ airflow_version }}-{{ distribution }}
      - scan-trivy:
          name: scan-trivy-{{ airflow_version }}-{{ distribution }}-onbuild
          airflow_version: {{ airflow_version }}
          distribution: {{ distribution }}
          distribution_name: {{ distribution }}-onbuild
          requires:
            - build-{{ airflow_version }}-{{ distribution }}
      - test:
          name: test-{{ airflow_version }}-{{ distribution }}-onbuild
          airflow_version: {{ airflow_version }}
          distribution_name: {{ distribution }}
          requires:
            - build-{{ airflow_version }}-{{ distribution }}
      - publish:
          name: publish-{{ airflow_version }}-{{ distribution }}
          tag: "{{ airflow_version }}-{{ distribution }}"
          extra_tags: "{{ airflow_version }}-{{ distribution }}-${CIRCLE_BUILD_NUM}"
          requires:
            - scan-{{ airflow_version }}-{{ distribution }}-onbuild
            - scan-trivy-{{ airflow_version }}-{{ distribution }}-onbuild
            - test-{{ airflow_version }}-{{ distribution }}-onbuild
          filters:
            branches:
              only: master
      - publish:
          name: publish-{{ airflow_version }}-{{ distribution }}-onbuild
          tag: "{{ airflow_version }}-{{ distribution }}-onbuild"
          extra_tags: "{{ airflow_version }}-{{ distribution }}-onbuild-${CIRCLE_BUILD_NUM}"
          requires:
            - scan-{{ airflow_version }}-{{ distribution }}-onbuild
            - scan-trivy-{{ airflow_version }}-{{ distribution }}-onbuild
            - test-{{ airflow_version }}-{{ distribution }}-onbuild
          filters:
            branches:
              only: master
{% endfor %}
{% endfor %}
jobs:
  build:
    executor: docker-executor
    description: Build Airflow images
    parameters:
      airflow_version:
        description: "The Airflow version, for example '1.10.5'"
        type: string
      distribution_name:
        description: "The base distribution of the container"
        type: string
    steps:
      - docker-build-base-and-onbuild:
          airflow_version: "<< parameters.airflow_version >>"
          distribution_name: "<< parameters.distribution_name >>"
  test:
    executor: machine-executor
    description: Test Airflow images
    parameters:
      airflow_version:
        description: "The Airflow version, for example '1.10.5'"
        type: string
      distribution_name:
        description: "The base distribution of the container"
        type: string
    steps:
      - airflow-image-test:
          repository: "astronomerinc/ap-airflow"
          tag: "<< parameters.airflow_version >>-<< parameters.distribution_name >>"
  scan:
    executor: clair-scanner/default
    description: Test Airflow images
    parameters:
      airflow_version:
        description: "The Airflow version, for example '1.10.5'"
        type: string
      distribution_name:
        description: "The base distribution of the container"
        type: string
    steps:
      - clair-scan:
          image_name: "astronomerinc/ap-airflow:<< parameters.airflow_version >>-<< parameters.distribution_name >>"
  scan-trivy:
    docker:
      - image: docker:18.09-git
    description: "Trivy: Vulnerability scanner a Docker image"
    parameters:
      airflow_version:
        description: "The Airflow version, for example '1.10.5'"
        type: string
      distribution_name:
        description: "The base distribution of the container"
        type: string
      distribution:
        description: "The distribution without onbuild"
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/saved-images/astronomerinc/ap-airflow:<< parameters.airflow_version >>-<< parameters.distribution_name >>.tar
      - run:
          name: Install trivy
          command: |
            apk add --update-cache --upgrade curl rpm
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/master/contrib/install.sh | sh -s -- -b /usr/local/bin
      - restore_cache:
          keys:
            - trivy-cache
      - run:
          name: Scan the local image with trivy
          command: |
            trivy --ignorefile ./<< parameters.airflow_version >>/<< parameters.distribution >>/trivyignore --cache-dir /tmp/workspace/trivy-cache --ignore-unfixed -s HIGH,CRITICAL --exit-code 1 --no-progress "astronomerinc/ap-airflow:<< parameters.airflow_version >>-<< parameters.distribution_name >>"
      - save_cache:
          key: trivy-cache
          paths:
            - /tmp/workspace/trivy-cache
  publish:
    executor: docker-executor
    description: Publish Airflow images
    parameters:
      tag:
        type: string
      extra_tags:
        type: string
        default: ""
    steps:
      - push:
          extra_tags: "<< parameters.extra_tags >>"
          tag: "<< parameters.tag >>"
          image_name: "astronomerinc/ap-airflow"
orbs:
  clair-scanner: ovotech/clair-scanner@1.6.0
executors:
  docker-executor:
    docker:
      - image: circleci/python:3
  machine-executor:
    machine:
      image: ubuntu-1604:201903-01
commands:

  docker-build-base-and-onbuild:
    description: "Build Airflow images to use with the Astronomer platform"
    parameters:
      airflow_version:
        type: string
        default: 1.10.5
      distribution_name:
        type: string
        default: alpine
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - docker-build:
          image_name: "astronomerinc/ap-airflow:<< parameters.airflow_version >>-<< parameters.distribution_name >>"
          path: "<< parameters.airflow_version >>/<< parameters.distribution_name >>"
      - docker-build:
          image_name: "astronomerinc/ap-airflow:<< parameters.airflow_version >>-<< parameters.distribution_name >>-onbuild"
          path: "<< parameters.airflow_version >>/<< parameters.distribution_name >>/onbuild"
      - persist_to_workspace:
          root: .
          paths:
            - saved-images/
  docker-build:
    description: "Build a Docker image"
    parameters:
      dockerfile:
        type: string
        default: Dockerfile
      path:
        type: string
        default: "."
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
    steps:
      - run:
          name: Build the Docker image
          command: |
            set -xe
            mkdir -p saved-images/"$(dirname "<< parameters.image_name >>")"
            docker build -t "<< parameters.image_name >>" --file << parameters.path>>/<< parameters.dockerfile >> --build-arg BUILD_NUMBER=${CIRCLE_BUILD_NUM} --build-arg REPO_BRANCH=${CIRCLE_BRANCH} << parameters.path >>
            docker save -o saved-images/<< parameters.image_name >>.tar << parameters.image_name >>
  airflow-image-test:
    description: Test an Airflow image
    parameters:
      repository:
        type: string
      tag:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load archived Airflow Docker image
          command: docker load -i /tmp/workspace/saved-images/<< parameters.repository >>:<< parameters.tag >>.tar
      - run:
          name: Test Airflow Docker image
          command: |
            set -e
            pyenv global 3.7.0
            pip install -r .circleci/test-requirements.txt
            .circleci/bin/test-airflow << parameters.repository >> << parameters.tag >>
      - store_test_results:
          path: /tmp/test-reports
  push:
    description: "Push a Docker image to DockerHub"
    parameters:
      extra_tags:
        type: string
        default: ""
      tag:
        type: string
      image_name:
        type: string
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i '/tmp/workspace/saved-images/<< parameters.image_name >>:<< parameters.tag >>.tar'
      - run:
          name: Login to DockerHub
          command: echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USERNAME --password-stdin
      - run:
          name: Push Docker image(s)
          command: |
            set -e
            image="<< parameters.image_name >>:<< parameters.tag >>"
            set -x
            docker push "$image"
            set +x
            for tag in $(echo "<< parameters.extra_tags >>" | sed "s/,/ /g");
            do
              set -x
              docker tag "$image" "<< parameters.image_name >>:${tag}"
              docker push "<< parameters.image_name >>:${tag}"
              set +x
            done
  clair-scan:
    description: "Vulnerability scan a Docker image"
    parameters:
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
      whitelist:
        type: string
        default: cve-whitelist.yaml
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/saved-images/<< parameters.image_name >>.tar
      - modified-orb:
          whitelist: "<< parameters.whitelist >>"
          image: "<< parameters.image_name >>"
  # TODO: move to an Astronomer orbs repo, publish orb.
  # This is to work around an issue in the provided orb https://github.com/ovotech/circleci-orbs/issues/89.
  modified-orb:
    description: "Scan an image for vulnerabilities"
    parameters:
      image:
        type: "string"
        description: "Name of the image to scan"
        default: ""
      image_file:
        type: "string"
        description: "Path to a file of images to scan"
        default: ""
      whitelist:
        type: "string"
        description: "Path to a CVE whitelist"
        default: ""
      severity_threshold:
        type: "string"
        description: "The threshold (equal and above) at which discovered vulnerabilities are reported. May be 'Defcon1', 'Critical', 'High', 'Medium', 'Low', 'Negligible' or 'Unknown'"
        default: "High"
      fail_on_discovered_vulnerabilities:
        type: "boolean"
        description: "Fail command when vulnerabilities at severity equal to or above the threshold are discovered"
        default: true
      fail_on_unsupported_images:
        type: "boolean"
        description: "Fail command when image cannot be scanned for vulnerabilities"
        default: true
      disable_verbose_console_output:
        type: "boolean"
        description: "Disable verbose console output"
        default: false
      docker_tar_dir:
        type: "string"
        description: "Path of directory that Docker tarballs are stored"
        default: "/docker-tars"
    steps:
      - run:
          name: "Vulnerability scan"
          command: |
            #!/usr/bin/env bash

            set -xe

            DOCKER_TAR_DIR="<< parameters.docker_tar_dir >>"

            if [ -z "<< parameters.image_file >><< parameters.image >>" ] && [ -z "$(ls -A "$DOCKER_TAR_DIR" 2>/dev/null)" ]; then
                echo "image_file or image parameters or docker tarballs must be present"
                exit 255
            fi

            REPORT_DIR=/clair-reports
            mkdir $REPORT_DIR

            DB=$(docker run -p 5432:5432 -d arminc/clair-db:latest)
            CLAIR=$(docker run -p 6060:6060 --link "$DB":postgres -d arminc/clair-local-scan:latest)
            CLAIR_SCANNER=$(docker run -v /var/run/docker.sock:/var/run/docker.sock -d ovotech/clair-scanner@sha256:8a4f920b4e7e40dbcec4a6168263d45d3385f2970ee33e5135dd0e3b75d39c75 tail -f /dev/null)

            clair_ip=$(docker exec -it "$CLAIR" hostname -i | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')
            scanner_ip=$(docker exec -it "$CLAIR_SCANNER" hostname -i | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')

            if [ -n "<< parameters.whitelist >>" ]; then
                cat "<< parameters.whitelist >>"
                docker cp "<< parameters.whitelist >>" "$CLAIR_SCANNER:/whitelist.yml"

                WHITELIST="-w /whitelist.yml"
            fi

            function scan() {
                local image=$1
                # replace forward-slashes and colons with underscores
                munged_image=$(echo "$image" | sed 's/\//_/g' | sed 's/:/_/g')
                sanitised_image_filename="${munged_image}.json"
                local ret=0
                local docker_cmd=(docker exec -it "$CLAIR_SCANNER" clair-scanner \
                    --ip "$scanner_ip" \
                    --clair=http://"$clair_ip":6060 \
                    -t "<< parameters.severity_threshold >>" \
                    --report "/$sanitised_image_filename" \
                    --log "/log.json" \
                    --whitelist /whitelist.yml \
                    --reportAll=true \
                    --exit-when-no-features=false \
                    "$image")

                # if verbose output is disabled, analyse status code for more fine-grained output
                if [ "<< parameters.disable_verbose_console_output >>" == "true" ];then
                    "${docker_cmd[@]}" > /dev/null 2>&1 || ret=$?
                else
                    "${docker_cmd[@]}" 2>&1 || ret=$?
                fi
                if [ $ret -eq 0 ]; then
                    echo "No unapproved vulnerabilities"
                elif [ $ret -eq 1 ]; then
                    echo "Unapproved vulnerabilities found"
                    if [ "<< parameters.fail_on_discovered_vulnerabilities >>" == "true" ];then
                        EXIT_STATUS=1
                    fi
                elif [ $ret -eq 5 ]; then
                    echo "Image was not scanned, not supported."
                    if [ "<< parameters.fail_on_unsupported_images >>" == "true" ];then
                        EXIT_STATUS=1
                    fi
                else
                    echo "Unknown clair-scanner return code $ret."
                    EXIT_STATUS=1
                fi

                docker cp "$CLAIR_SCANNER:/$sanitised_image_filename" "$REPORT_DIR/$sanitised_image_filename" || true
            }

            EXIT_STATUS=0

            for entry in "$DOCKER_TAR_DIR"/*.tar; do
                [ -e "$entry" ] || continue
                images=$(docker load -i "$entry" | sed -e 's/Loaded image: //g')
                for image in $images; do
                    scan "$image"
                done
            done

            if [ -n "<< parameters.image_file >>" ]; then
                images=$(cat "<< parameters.image_file >>")
                for image in $images; do
                    scan "$image"
                done
            fi
            if [ -n "<< parameters.image >>" ]; then
                image="<< parameters.image >>"
                scan "$image"
            fi

            exit $EXIT_STATUS
      - store_artifacts:
          path: /clair-reports
