{%- set approvers = ["UHRPL613K", "U01PS0N06DN"] -%}
{%- if approvers|length > 1 -%}
{%- set approvers_slack_syntax = ("<@" + (approvers|join(">\\n<@")) + ">") | safe -%}
{%- else -%}
{%- set approvers_slack_syntax = ("<@" + (approvers|join("")) + ">" ) | safe -%}
{%- endif -%}
{%- set qa_reponame = "qa-airflow-run-on-software" -%}
{%- set qa_repo = "https://github.com/astronomer/" + qa_reponame -%}
{%- set qa_repo_default_branch = "master" -%}
{%- set qa_circleci_project ="https://app.circleci.com/pipelines/github/astronomer/qa-airflow-run-on-software?branch=" + qa_repo_default_branch -%}
{%- set workspace_prefix = '/tmp/workspace' -%}
version: 2.1

workflows:
  certified-airflow:
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - static-checks
      - build-package:
          requires:
            - static-checks
          filters:
            tags:
              only: /^\d+\.\d+\.\d+(\-[\w\d]+)?$/
      {%- for ac_version, distributions in image_map.items() %}
      {%- set airflow_version = ac_version | get_airflow_version -%}
      {%- set airflow_version_wout_dev = airflow_version | replace('.dev', '') | replace('-dev', '') -%}
      {%- set ext_build_filename = 'latest-' + airflow_version_wout_dev + '.build.json' %}
      {%- set ext_build_filename_workspace = workspace_prefix + '/latest-' + airflow_version_wout_dev + '.build.json' %}
      {%- set dev_build = "true" if "dev" in ac_version else "false" %}
      {%- set edge_build = ac_version | is_edge_build %}

      # {{ airflow_version }}
      {%- if edge_build %}
      - download-file:
          name: download-latest-{{ airflow_version_wout_dev }}-build-metadata-file
          url: https://pip.astronomer.io/simple/astronomer-certified/{{ ext_build_filename }}
          file: {{ ext_build_filename }}
          output_file: extra-tags-{{ airflow_version_wout_dev }}.txt
      {%- endif %}{# edge_build #}

      {%- for distribution in distributions %}
      # {{ airflow_version }} - {{ distribution }}
      - build:
          name: build-{{ airflow_version }}-{{ distribution }}
          airflow_version: "{{ airflow_version }}"
          distribution_name: {{ distribution }}
          dev_build: {{ dev_build }}
          edge_build: {{ edge_build }}
          {%- if "dev" in ac_version %}
          extra_args: |-
            {#- If you modify this, make sure you also modify it in the 'nightly' workflow -#}
            {%- if not edge_build %}
            {%- if airflow_version_wout_dev >= "2.3.4" %}
            --build-arg VERSION=$(curl https://pip.astronomer.io/v2/apache-airflow/latest-{{ airflow_version_wout_dev }}-dev.build)
            {%- else %}
            --build-arg VERSION=$(curl https://pip.astronomer.io/simple/astronomer-certified/latest-{{ airflow_version_wout_dev }}.build)
            {%- endif %}{# airflow_version_wout_dev >= "2.3.4" #}
            {%- else %}
            --build-arg VERSION=$(jq -r '.output.astronomer_certified.package.version' <{{ ext_build_filename_workspace }}) \
            --label org.apache.airflow.ci.build.date=$(jq -r '.date' <{{ ext_build_filename_workspace }}) \
            --label org.apache.airflow.ci.build.url=$(jq -r '.github.run.url' <{{ ext_build_filename_workspace }}) \
            --label org.apache.airflow.ci.build.version=$(jq -r '.output.airflow.package.version' <{{ ext_build_filename_workspace }}) \
            --label org.apache.airflow.ci.js.node.version_string=$(jq -r '.js.node.version' <{{ ext_build_filename_workspace }}) \
            --label org.apache.airflow.ci.js.npm.version_string=$(jq -r '.js.npm.version' <{{ ext_build_filename_workspace }}) \
            --label org.apache.airflow.ci.js.yarn.version_string=$(jq -r '.js.yarn.version' <{{ ext_build_filename_workspace }}) \
            --label org.apache.airflow.ci.python.version_string="$(jq -r '.python.version' <{{ ext_build_filename_workspace }})" \
            --label io.astronomer.airflow.built_from.git.branch=$(jq -r '.git.built_from.branch' <{{ ext_build_filename_workspace }}) \
            --label io.astronomer.airflow.built_from.git.commit_sha=$(jq -r '.git.built_from.commit' <{{ ext_build_filename_workspace }}) \
            --label io.astronomer.airflow.built_by.git.$(jq -r '.git.built_by.ref.type' <{{ ext_build_filename_workspace }})=$(jq -r '.git.built_by.ref.name' <{{ ext_build_filename_workspace }}) \
            --label io.astronomer.airflow.built_by.git.commit_sha=$(jq -r '.git.built_by.commit' <{{ ext_build_filename_workspace }}) \
            --label io.astronomer.astronomer_certified.build.version=$(jq -r '.output.astronomer_certified.package.version' <{{ ext_build_filename_workspace }}) \
            --label com.circleci.workflow.id="${CIRCLE_WORKFLOW_ID}" \
            {#- This redirects to the canonical workflow URL #}
            --label com.circleci.workflow.url="https://app.circleci.com/pipelines/workflows/${CIRCLE_WORKFLOW_ID}"
            {%- endif %}{# edge_build #}
          {%- endif %}
          {%- if distribution in ["buster"] %}
          image_name: "ap-airflow:{{ airflow_version }}-{{ distribution }}"
          {%- else %}
          image_name: "ap-airflow:{{ airflow_version }}"
          {%- endif %}
          requires:
            - build-package
            {%- if edge_build %}
            - download-latest-{{ airflow_version_wout_dev }}-build-metadata-file
            {%- endif %}
      - scan-trivy:
          name: scan-trivy-{{ airflow_version }}-{{ distribution }}-onbuild
          airflow_version: "{{ airflow_version }}"
          distribution: {{ distribution }}
          distribution_name: {{ distribution }}-onbuild
          {%- if distribution in ["buster"] %}
          image_name: "ap-airflow:{{ airflow_version }}-{{ distribution }}"
          {%- else %}
          image_name: "ap-airflow:{{ airflow_version }}"
          {%- endif %}
          requires:
            - build-{{ airflow_version }}-{{ distribution }}
      - test:
          name: test-{{ airflow_version }}-{{ distribution }}-images
          {%- if distribution in ["buster"] %}
          tag: "{{ airflow_version }}-{{ distribution }}"
          {%- else %}
          tag: "{{ airflow_version }}"
          {%- endif %}
          requires:
            - build-{{ airflow_version }}-{{ distribution }}
      {#- Only dev and edge builds are allowed to skip approval before pushing and notifying #}
      {%- if "dev" not in ac_version and not edge_build %}
      - slack/on-hold:
          name: Slack-Approval-Notification-{{ airflow_version }}-{{ distribution }}
          context: slack_ap-airflow
          # If anybody complains about us using the old Astronomer logo, here's
          # an Imgur album containing a few different options:
          # https://imgur.com/a/CYRKjQ3
          custom: |
            {% filter indent(width=12) -%}
            {% include "new_build_slack_approval.json.j2" %}
            {%- endfilter %}
          requires:
            - scan-trivy-{{ airflow_version }}-{{ distribution }}-onbuild
            - test-{{ airflow_version }}-{{ distribution }}-images
          filters:
            branches:
              only:
                - master
      - pause_workflow:
          name: Need-Approval-{{ airflow_version }}-{{ distribution }}
          requires:
            - Slack-Approval-Notification-{{ airflow_version }}-{{ distribution }}
          type: approval
          filters:
            branches:
              only:
                - master
      {%- endif %}
      - push:
          name: push-{{ airflow_version }}-{{ distribution }}
          dev_build: {{ dev_build }}
          edge_build: {{ edge_build }}
          nightly_build: false
          {%- if distribution in ["buster"] %}
          tag: "{{ airflow_version }}-{{ distribution }}"
          extra_tags: "{{ airflow_version }}-{{ distribution }}-${CIRCLE_BUILD_NUM},{{ ac_version }}-{{ distribution }}"
          {%- else %}
          tag: "{{ airflow_version }}"
          extra_tags: "{{ airflow_version }}-${CIRCLE_BUILD_NUM},{{ ac_version }}"
          {%- endif %}
          context:
            - quay.io
            - docker.io
            - qa
          requires:
            {%- if "dev" not in ac_version and not edge_build %}
            - Need-Approval-{{ airflow_version }}-{{ distribution }}
            {%- else %}
            - scan-trivy-{{ airflow_version }}-{{ distribution }}-onbuild
            - test-{{ airflow_version }}-{{ distribution }}-images
            {%- endif %}
          filters:
            branches:
              only:
                - master
      - push:
          name: push-{{ airflow_version }}-{{ distribution }}-onbuild
          dev_build: {{ dev_build }}
          edge_build: {{ edge_build }}
          nightly_build: false
          {%- if distribution in ["buster"] %}
          tag: "{{ airflow_version }}-{{ distribution }}-onbuild"
          extra_tags: "{{ airflow_version }}-{{ distribution }}-onbuild-${CIRCLE_BUILD_NUM},{{ ac_version }}-{{ distribution }}-onbuild"
          {%- else %}
          tag: "{{ airflow_version }}-onbuild"
          extra_tags: "{{ airflow_version }}-onbuild-${CIRCLE_BUILD_NUM},{{ ac_version }}-onbuild"
          {%- endif %}
          context:
            - quay.io
            - docker.io
            - qa
          requires:
            {%- if "dev" not in ac_version and not edge_build %}
            - Need-Approval-{{ airflow_version }}-{{ distribution }}
            {%- else %}
            - scan-trivy-{{ airflow_version }}-{{ distribution }}-onbuild
            - test-{{ airflow_version }}-{{ distribution }}-images
            {%- endif %}
          filters:
            branches:
              only:
                - master
                - slack-build-approvals
      - new-build-slack-notification:
          name: new-build-slack-notification-{{ airflow_version }}-{{ distribution }}-onbuild
          dev_build: {{ dev_build }}
          airflow_version: "{{ airflow_version }}"
          {%- if distribution in ["buster"] %}
          tag: "{{ airflow_version }}-{{ distribution }}-onbuild"
          extra_tags: "{{ ac_version }}-{{ distribution }}-onbuild"
          {%- else %}
          tag: "{{ airflow_version }}-onbuild"
          extra_tags: "{{ ac_version }}-onbuild"
          {%- endif %}
          context:
            - slack_ap-airflow
          requires:
            - push-{{ airflow_version }}-{{ distribution }}
            - push-{{ airflow_version }}-{{ distribution }}-onbuild
          filters:
            branches:
              only:
                - master

      {#- Only dev and edge builds kick off smoke and regression tests (for now) #}
      {%- if "dev" in ac_version or edge_build %}
      - kick-off-smoke-tests:
          name: Kick-off-smoke-tests-{{ airflow_version }}-{{ distribution }}
          {%- if distribution in ["buster"] %}
          image_tag: "{{ airflow_version }}-{{ distribution }}"
          {%- else %}
          image_tag: "{{ airflow_version }}"
          {%- endif %}
          airflow_version: "{{ airflow_version }}"
          requires:
            - push-{{ airflow_version }}-{{ distribution }}
            - push-{{ airflow_version }}-{{ distribution }}-onbuild
          filters:
            branches:
              only:
                - master
                - test
      - smoke-test-slack-notification:
          name: smoke-test-slack-notification-{{ airflow_version }}-{{ distribution }}
          airflow_version: "{{ airflow_version }}"
          {%- if distribution in ["buster"] %}
          image_tag: "{{ airflow_version }}-{{ distribution }}"
          {%- else %}
          image_tag: "{{ airflow_version }}"
          {%- endif %}
          context:
            - slack_ap-airflow
          requires:
            - Kick-off-smoke-tests-{{ airflow_version }}-{{ distribution }}
          filters:
            branches:
              only:
                - master
      - slack/on-hold:
          name: Slack-Approval-Notification-{{ airflow_version }}-{{ distribution }}-Regression-Tests
          context: slack_ap-airflow
          # If anybody complains about us using the old Astronomer logo, here's
          # an Imgur album containing a few different options:
          # https://imgur.com/a/CYRKjQ3
          custom: |
            {% filter indent(width=12) -%}
            {% include "regression_test_slack_approval.json.j2" %}
            {%- endfilter %}
          requires:
            - smoke-test-slack-notification-{{ airflow_version }}-{{ distribution }}
          filters:
            branches:
              only:
                - master

      - pause_workflow:
          name: Need-Approval-{{ airflow_version }}-{{ distribution }}-Regression-Tests
          requires:
            - Slack-Approval-Notification-{{ airflow_version }}-{{ distribution }}-Regression-Tests
          type: approval
          filters:
            branches:
              only:
                - master
      - kick-off-regression-tests:
          name: Kick-off-regression-tests-{{ airflow_version }}-{{ distribution }}
          {%- if distribution in ["buster"] %}
          image_tag: "{{ airflow_version }}-{{ distribution }}"
          {%- else %}
          image_tag: "{{ airflow_version }}"
          {%- endif %}
          airflow_version: "{{ airflow_version }}"
          requires:
            - Need-Approval-{{ airflow_version }}-{{ distribution }}-Regression-Tests
          filters:
            branches:
              only:
                - master
      - regression-test-slack-notification:
          name: regression-test-slack-notification-{{ airflow_version }}-{{ distribution }}
          airflow_version: "{{ airflow_version }}"
          {%- if distribution in ["buster"] %}
          image_tag: "{{ airflow_version }}-{{ distribution }}"
          {%- else %}
          image_tag: "{{ airflow_version }}"
          {%- endif %}
          context:
            - slack_ap-airflow
          requires:
            - Kick-off-regression-tests-{{ airflow_version }}-{{ distribution }}
          filters:
            branches:
              only:
                - master
      {%- endif %}{# dev and edge builds - smoke regression tests #}
      {%- endfor %}{# distribution in distributions #}
      {%- endfor %}{# ac_version, distributions in image_map.items() #}

  nightly:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "every-midnight-utc", << pipeline.schedule.name >> ]
    jobs:
      {%- for ac_version, distributions in image_map.items() %}
      {%- set airflow_version = ac_version | get_airflow_version %}
      {%- set airflow_version_wout_dev = airflow_version | replace('.dev', '') | replace('-dev', '') -%}
      {%- set dev_release = ac_version | is_dev_release -%}
      {%- set edge_build = ac_version | is_edge_build -%}
      {%- set ext_build_filename = 'latest-' + airflow_version_wout_dev + '.build.json' %}
      {%- set ext_build_filename_workspace = workspace_prefix + '/latest-' + airflow_version_wout_dev + '.build.json' %}

      {%- if dev_release -%}
      {%- if edge_build %}
      - download-file:
          name: download-latest-{{ airflow_version_wout_dev }}-build-info
          url: https://pip.astronomer.io/simple/astronomer-certified/{{ ext_build_filename }}
          file: {{ ext_build_filename }}
          output_file: extra-tags-{{ airflow_version_wout_dev }}.txt
      {%- endif %}{# edge_build #}

      {%- for distribution in distributions %}
      - build:
          name: build-{{ airflow_version }}-{{ distribution }}
          airflow_version: "{{ airflow_version }}"
          distribution_name: {{ distribution }}
          dev_build: true
          edge_build: {{ edge_build }}
          extra_args: |-
            {#- If you modify this, make sure you also modify it in the 'certified-airflow' workflow -#}
            {%- if not edge_build %}
            {%- if airflow_version_wout_dev >= "2.3.4" %}
            --build-arg VERSION=$(curl https://pip.astronomer.io/v2/apache-airflow/latest-{{ airflow_version_wout_dev }}-dev.build)
            {%- else %}
            --build-arg VERSION=$(curl https://pip.astronomer.io/simple/astronomer-certified/latest-{{ airflow_version_wout_dev }}.build)
            {%- endif %}{# airflow_version_wout_dev >= "2.3.4" #}
            {%- else %}
            --build-arg VERSION=$(jq -r '.output.astronomer_certified.package.version' <{{ ext_build_filename_workspace }}) \
            --label org.apache.airflow.ci.build.date=$(jq -r '.date' <{{ ext_build_filename_workspace }}) \
            --label org.apache.airflow.ci.build.url=$(jq -r '.github.run.url' <{{ ext_build_filename_workspace }}) \
            --label org.apache.airflow.ci.build.version=$(jq -r '.output.airflow.package.version' <{{ ext_build_filename_workspace }}) \
            --label org.apache.airflow.ci.js.node.version_string=$(jq -r '.js.node.version' <{{ ext_build_filename_workspace }}) \
            --label org.apache.airflow.ci.js.npm.version_string=$(jq -r '.js.npm.version' <{{ ext_build_filename_workspace }}) \
            --label org.apache.airflow.ci.js.yarn.version_string=$(jq -r '.js.yarn.version' <{{ ext_build_filename_workspace }}) \
            --label org.apache.airflow.ci.python.version_string="$(jq -r '.python.version' <{{ ext_build_filename_workspace }})" \
            --label io.astronomer.airflow.built_from.git.branch=$(jq -r '.git.built_from.branch' <{{ ext_build_filename_workspace }}) \
            --label io.astronomer.airflow.built_from.git.commit_sha=$(jq -r '.git.built_from.commit' <{{ ext_build_filename_workspace }}) \
            --label io.astronomer.airflow.built_by.git.$(jq -r '.git.built_by.ref.type' <{{ ext_build_filename_workspace }})=$(jq -r '.git.built_by.ref.name' <{{ ext_build_filename_workspace }}) \
            --label io.astronomer.airflow.built_by.git.commit_sha=$(jq -r '.git.built_by.commit' <{{ ext_build_filename_workspace }}) \
            --label io.astronomer.astronomer_certified.build.version=$(jq -r '.output.astronomer_certified.package.version' <{{ ext_build_filename_workspace }}) \
            --label com.circleci.workflow.id="${CIRCLE_WORKFLOW_ID}" \
            {#- This redirects to the canonical workflow URL #}
            --label com.circleci.workflow.url="https://app.circleci.com/pipelines/workflows/${CIRCLE_WORKFLOW_ID}"
            {%- endif %}{# edge_build #}
          {%- if distribution in ["buster"] %}
          image_name: "ap-airflow:{{ airflow_version }}-{{ distribution }}"
          {%- else %}
          image_name: "ap-airflow:{{ airflow_version }}"
          {%- endif %}
          {%- if edge_build %}
          requires:
            - download-latest-{{ airflow_version_wout_dev }}-build-info
          {%- endif %}
      - scan-trivy:
          name: scan-trivy-{{ airflow_version }}-{{ distribution }}-onbuild
          airflow_version: "{{ airflow_version }}"
          distribution: {{ distribution }}
          distribution_name: {{ distribution }}-onbuild
          {%- if distribution in ["buster"] %}
          image_name: "ap-airflow:{{ airflow_version }}-{{ distribution }}"
          {%- else %}
          image_name: "ap-airflow:{{ airflow_version }}"
          {%- endif %}
          requires:
            - build-{{ airflow_version }}-{{ distribution }}
      - test:
          name: test-{{ airflow_version }}-{{ distribution }}-images
          {%- if distribution in ["buster"] %}
          tag: "{{ airflow_version }}-{{ distribution }}"
          {%- else %}
          tag: "{{ airflow_version }}"
          {%- endif %}
          requires:
            - build-{{ airflow_version }}-{{ distribution }}
      - push:
          name: push-{{ airflow_version }}-{{ distribution }}
          dev_build: true
          edge_build: {{ edge_build }}
          nightly_build: true
          {%- if distribution in ["buster"] %}
          tag: "{{ airflow_version }}-{{ distribution }}"
          extra_tags: "{{ airflow_version }}-{{ distribution }}-${CIRCLE_BUILD_NUM},{{ ac_version }}-{{ distribution }}"
          {%- else %}
          tag: "{{ airflow_version }}"
          extra_tags: "{{ airflow_version }}-${CIRCLE_BUILD_NUM},{{ ac_version }}"
          {%- endif %}{# distribution in ["buster"] #}
          {%- if edge_build %}
          extra_tags_file: {{ workspace_prefix }}/extra-tags-{{ airflow_version_wout_dev }}.txt
          {%- endif %}{# edge_build #}
          context:
            - quay.io
            - docker.io
            - qa
          requires:
            - scan-trivy-{{ airflow_version }}-{{ distribution }}-onbuild
            - test-{{ airflow_version }}-{{ distribution }}-images
          filters:
            branches:
              only:
                - master
      - push:
          name: push-{{ airflow_version }}-{{ distribution }}-onbuild
          dev_build: true
          edge_build: {{ edge_build }}
          nightly_build: true
          {%- if distribution in ["buster"] %}
          tag: "{{ airflow_version }}-{{ distribution }}-onbuild"
          extra_tags: "{{ airflow_version }}-{{ distribution }}-onbuild-${CIRCLE_BUILD_NUM},{{ ac_version }}-{{ distribution }}-onbuild"
          {%- else %}
          tag: "{{ airflow_version }}-onbuild"
          extra_tags: "{{ airflow_version }}-onbuild-${CIRCLE_BUILD_NUM},{{ ac_version }}-onbuild"
          {%- endif %}
          context:
            - quay.io
            - docker.io
            - qa
          requires:
            - scan-trivy-{{ airflow_version }}-{{ distribution }}-onbuild
            - test-{{ airflow_version }}-{{ distribution }}-images
          filters:
            branches:
              only:
                - master
      {%- endfor %}{# distribution in distributions #}
      {%- else  -%}{# if dev_release #}
      # {{ airflow_version }}
      {%- for distribution in distributions %}
      # {{ airflow_version }} - {{ distribution }}
      - scan-trivy:
          name: scan-trivy-{{ airflow_version }}-{{ distribution }}-onbuild
          airflow_version: "{{ airflow_version }}"
          distribution: {{ distribution }}
          distribution_name: {{ distribution }}-onbuild
          {%- if distribution in ["buster"] %}
          image_name: "quay.io/astronomer/ap-airflow:{{ airflow_version }}-{{ distribution }}"
          {%- else %}
          image_name: "quay.io/astronomer/ap-airflow:{{ airflow_version }}"
          {%- endif %}
      {%- endfor %}{# distribution in distributions #}
      {%- endif -%}{# dev_release #}
      {%- endfor %}{# ac_version, distributions in image_map.items() #}

jobs:
  static-checks:
    executor: machine-executor
    description: Static Checks
    steps:
      - run:
          name: Install yq
          command: |
            sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
            sudo chmod +x /usr/local/bin/yq
      - run:
          name: Install shellcheck
          command: |
            sudo apt update
            sudo apt install --yes shellcheck
      - checkout
      - run:
          name: Load archived Docker image
          command: |
            pyenv global 3.8.5
            pip install -r .circleci/test-requirements.txt
            pre-commit run --all-files || { git --no-pager diff && false ; }
  download-file:
    executor: machine-executor
    description: Download a file to disk
    parameters:
      url:
        description: The full URL to download from
        type: string
      file:
        description: The output file to write to (existing files will be overwritten)
        type: string
      output_file:
        description: The file to write
        type: string
    steps:
      - run:
          name: Downloading file with curl
          command: |
            curl << parameters.url >> > << parameters.file >>
            # Avoid polluting logs with a huge file - <= 100 lines or <= 2048 bytes
            if [[ "$(wc -l < << parameters.file >>)" -le 100 || "$(wc -c)" -le 2048 ]]; then
              echo "Output file:"
              cat << parameters.file >>
            else
              echo "Emitting output file would pollute logs; skipping"
            fi
      - run:
          name: Writing extra steps file
          command: |
            echo "Input JSON file:"
            cat << parameters.file >>
            jq --raw-output '.output.astronomer_certified.package.version' < << parameters.file >> > << parameters.output_file >>
            echo "Output newline-separated file:"
            cat << parameters.output_file >>
      - persist_to_workspace:
          root: .
          paths:
            - << parameters.output_file >>
            - << parameters.file >>
  build-package:
    executor: machine-executor
    description: Build Python Package
    steps:
      - checkout
      - run:
          name: Install test deps
          command: |
            # Use a virtual env to encapsulate everything in one folder for caching
            python3 -m venv .venv
            . .venv/bin/activate
            pip install -U setuptools build wheel
            cd package
            pip install -r dev-requirements.txt
      - run:
          name: run_tests
          command: |
            . .venv/bin/activate
            mkdir test-results
            pytest --junitxml=test-results/junit.xml
      - run:
          name: Run Python build
          command: |
            . .venv/bin/activate
            cd package
            python -m build -w
      - persist_to_workspace:
          root: .
          paths:
            - package/dist/
  build:
    executor: docker-executor
    description: Build Airflow images
    parameters:
      airflow_version:
        description: "The Airflow version, for example '1.10.5'"
        type: string
      distribution_name:
        description: "The base distribution of the container"
        type: string
      dev_build:
        description: "Indicate if this is a dev build"
        type: boolean
      edge_build:
        description: "Indicate if this is an edge build"
        type: boolean
        default: false
      extra_args:
        description: "Extra args to pass to pass to Docker build command"
        default: ""
        type: string
      image_name:
        type: string
        default: "ap-airflow:2.2.0"
    steps:
      - docker-build-base-and-onbuild:
          airflow_version: "<< parameters.airflow_version >>"
          distribution_name: "<< parameters.distribution_name >>"
          extra_args: "<< parameters.extra_args >>"
          image_name: "<< parameters.image_name >>"
          edge_build: "<< parameters.edge_build >>"
  test:
    executor: machine-executor
    description: Test Airflow images
    parameters:
      tag:
        type: string
    steps:
      - airflow-image-test:
          tag: "<< parameters.tag >>"
  scan-trivy:
    docker:
      - image: docker:18.09-git
    description: "Trivy: Vulnerability scanner a Docker image"
    parameters:
      airflow_version:
        description: "The Airflow version, for example '1.10.5'"
        type: string
      distribution_name:
        description: "The base distribution of the container"
        type: string
      distribution:
        description: "The distribution without onbuild"
        type: string
      image_name:
        type: string
        default: "ap-airflow:2.2.0"
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: {{ workspace_prefix }}
      - run:
          name: Load archived Docker image
          command: |
            if [[ -e "{{ workspace_prefix }}/saved-images/<< parameters.image_name >>-onbuild.tar" ]]; then
              docker load -i {{ workspace_prefix }}/saved-images/<< parameters.image_name >>-onbuild.tar
            fi
      - run:
          name: Install trivy
          command: |
            apk add --update-cache --upgrade curl rpm
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/master/contrib/install.sh | sh -s -- -b /usr/local/bin
      - restore_cache:
          keys:
            - trivy-cache
      - run:
          name: Scan the local image with trivy
          command: |
            trivy --cache-dir {{ workspace_prefix }}/trivy-cache \
              image \
              --ignorefile "./<< parameters.airflow_version >>/<< parameters.distribution >>/trivyignore" \
              --ignore-unfixed -s HIGH,CRITICAL \
              --exit-code 1 \
              --no-progress "<< parameters.image_name >>-onbuild"
      - save_cache:
          key: trivy-cache
          paths:
            - {{ workspace_prefix }}/trivy-cache
  push:
    executor: docker-executor
    description: Push Airflow images
    parameters:
      dev_build:
        description: "Indicate if this is a dev build"
        type: boolean
      edge_build:
        description: "Indicate if this is an edge build"
        type: boolean
      nightly_build:
        description: "Indicate if this is a nightly build"
        type: boolean
      tag:
        type: string
      extra_tags:
        type: string
        default: ""
      extra_tags_file:
        description: ""
        type: string
        default: ""
      prod_docker_repo_docker_hub:
        description: "The docker repo to tag and push to, for example 'quay.io/astronomer/ap-airflow'"
        default: "astronomerinc/ap-airflow"
        type: string
      prod_docker_repo_quay_io:
        description: "The docker repo to tag and push to, for example 'quay.io/astronomer/ap-airflow'"
        default: "quay.io/astronomer/ap-airflow"
        type: string
      dev_docker_repo_quay_io:
        description: "The docker repo to tag and push to, for example 'quay.io/astronomer/ap-airflow'"
        default: "quay.io/astronomer/ap-airflow-dev"
        type: string
    steps:
      - attach_workspace:
          at: {{ workspace_prefix }}
      - push:
          dev_release: << parameters.dev_build >>
          edge_build: << parameters.edge_build >>
          nightly_build: << parameters.nightly_build >>
          extra_tags: "<< parameters.extra_tags >>"
          extra_tags_file: "<< parameters.extra_tags_file >>"
          tag: "<< parameters.tag >>"
          prod_docker_repo_docker_hub: "<< parameters.prod_docker_repo_docker_hub >>"
          prod_docker_repo_quay_io: "<< parameters.prod_docker_repo_quay_io >>"
          dev_docker_repo_quay_io: "<< parameters.dev_docker_repo_quay_io >>"

  new-build-slack-notification:
    executor: docker-executor
    description: Slack notification about new image builds
    parameters:
      dev_build:
        description: "Indicate if this is a dev build"
        type: boolean
      airflow_version:
        type: string
      tag:
        type: string
      extra_tags:
        type: string
        default: ""
    steps:
      - slack/notify:
          branch_pattern: master,push_tags_db
          channel: airflow-ac-build-tags
          event: pass
          custom: |
            {% filter indent(width=12) -%}
            {% include "new_build_slack_approval.json.j2" %}
            {% endfilter %}

  kick-off-smoke-tests:
    description: Kick off new smoke tests
    executor: docker-executor
    parameters:
      image_tag:
        type: string
      airflow_version:
        type: string
    steps:
      - add_ssh_keys:
          fingerprints:
            - "ca:11:9b:ff:1d:72:65:a2:02:eb:53:79:bc:e2:f3:36"
      - checkout
      - install-yq
      - run:
          name: Kick off new smoke tests
          command: |
            .circleci/kickoff_qa_tests.sh << parameters.airflow_version >> << parameters.image_tag >> smoke

  smoke-test-slack-notification:
    executor: docker-executor
    description: Slack notification about kicking off smoke builds
    parameters:
      airflow_version:
        type: string
      image_tag:
        type: string
      qa_repo_default_branch:
        type: string
        default: {{ qa_repo_default_branch }}
      qa_circleci_project:
        type: string
        default: {{ qa_circleci_project }}
    steps:
      - slack/notify:
          branch_pattern: master,push_tags_db
          channel: airflow-ac-build-tags
          event: pass
          custom: |
            {% filter indent(width=12) -%}
            {% include "smoke_test_slack_notification.json.j2" %}
            {% endfilter %}

  kick-off-regression-tests:
    description: Kick off new regression tests
    executor: docker-executor
    parameters:
      image_tag:
        type: string
      airflow_version:
        type: string
    steps:
      - add_ssh_keys:
          fingerprints:
            - "ca:11:9b:ff:1d:72:65:a2:02:eb:53:79:bc:e2:f3:36"
      - checkout
      - install-yq
      - run:
          name: Kick off new regression tests
          command: |
            .circleci/kickoff_qa_tests.sh << parameters.airflow_version >> << parameters.image_tag >> regression

  regression-test-slack-notification:
    executor: docker-executor
    description: Slack notification about kicking off regression builds
    parameters:
      airflow_version:
        type: string
      image_tag:
        type: string
      qa_repo_default_branch:
        type: string
        default: {{ qa_repo_default_branch }}
      qa_circleci_project:
        type: string
        default: {{ qa_circleci_project }}
    steps:
      - slack/notify:
          branch_pattern: master,push_tags_db
          channel: airflow-ac-build-tags
          event: pass
          custom: |
            {% filter indent(width=12) -%}
            {% include "regression_test_slack_notification.json.j2" %}
            {% endfilter %}

orbs:
  slack: circleci/slack@4.4.4
  clair-scanner: ovotech/clair-scanner@1.6.0
executors:
  docker-executor:
    docker:
      - image: circleci/python:3
  machine-executor:
    machine:
      image: ubuntu-2004:202010-01

commands:
  docker-build-base-and-onbuild:
    description: "Build Airflow images to use with the Astronomer platform"
    parameters:
      airflow_version:
        type: string
        default: "1.10.5"
      distribution_name:
        type: string
        default: bullseye
      extra_args:
        description: "Extra args to pass to pass to Docker build command"
        default: ""
        type: string
      image_name:
        type: string
        default: "ap-airflow:2.2.0"
      edge_build:
        description: "Indicate if this is an edge build"
        type: boolean
        default: false
    steps:
      - checkout
      - attach_workspace:
          at: {{ workspace_prefix }}
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Copy wheels into place
          command: |
            mkdir -p "<< parameters.airflow_version >>/<< parameters.distribution_name >>/dist/"
            cp {{ workspace_prefix }}/package/dist/*.whl "<< parameters.airflow_version >>/<< parameters.distribution_name >>/dist/"
      - docker-build:
          image_name: "<< parameters.image_name >>"
          path: "<< parameters.airflow_version >>/<< parameters.distribution_name >>"
          extra_args: "<< parameters.extra_args >>"
          edge_build: "<< parameters.edge_build >>"
      - docker-build:
          image_name: "<< parameters.image_name >>-onbuild"
          path: "common/"
          dockerfile: "Dockerfile.onbuild-<< parameters.distribution_name >>"
          extra_args: "--build-arg baseimage=<< parameters.image_name >>"
          edge_build: "<< parameters.edge_build >>"
      - persist_to_workspace:
          root: .
          paths:
            - saved-images/
  docker-build:
    description: "Build a Docker image"
    parameters:
      dockerfile:
        type: string
        default: Dockerfile
      path:
        type: string
        default: "."
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
      extra_args:
        type: string
        default: ""
      edge_build:
        description: "Indicate if this is an edge build"
        type: boolean
        default: false
    steps:
      - attach_workspace:
          at: {{ workspace_prefix }}
      - run:
          name: Build the Docker image
          command: |
            set -xe
            mkdir -p saved-images/"$(dirname '<< parameters.image_name >>')"
            docker build $([[ "<< parameters.edge_build >>" == "true" ]] && printf -- "--no-cache") \
              --tag '<< parameters.image_name >>' \
              --label io.astronomer.docker.build_time="$(date +%s)" \
              --label io.astronomer.repo.commit_sha="${CIRCLE_SHA1}" \
              --label io.astronomer.repo.url="${CIRCLE_REPOSITORY_URL}" \
              --label io.astronomer.ci.build_url="${CIRCLE_BUILD_URL}" \
              --file '<< parameters.path >>/<< parameters.dockerfile >>' \
              << parameters.extra_args >> '<< parameters.path >>'
            docker save -o saved-images/<< parameters.image_name >>.tar '<< parameters.image_name >>'
            docker inspect << parameters.image_name >>
  airflow-image-test:
    description: Test an Airflow image
    parameters:
      tag:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: {{ workspace_prefix }}
      - run:
          name: Load archived Airflow Docker image
          command: |
            docker load -i {{ workspace_prefix }}/saved-images/ap-airflow:<< parameters.tag >>.tar
            docker load -i {{ workspace_prefix }}/saved-images/ap-airflow:<< parameters.tag >>-onbuild.tar
      - run:
          name: Test Airflow Docker images (Base + Onbuild)
          command: |
            set -e
            pyenv global 3.8.5
            pip install -r .circleci/test-requirements.txt
            .circleci/bin/test-airflow 'ap-airflow' '<< parameters.tag >>'
      - store_test_results:
          path: /tmp/test-reports
  push:
    description: "Push a Docker image to DockerHub"
    parameters:
      dev_release:
        description: "Indicate if this is a dev release"
        default: true
        type: boolean
      edge_build:
        description: "Indicate if this is an edge build"
        type: boolean
      nightly_build:
        description: "Indicate if this is a nightly build"
        type: boolean
      extra_tags:
        type: string
        default: ""
      extra_tags_file:
        description: "File containing additional tags, one per line"
        type: string
        default: ""
      tag:
        type: string
      image_name:
        default: ap-airflow
        type: string
      prod_docker_repo_docker_hub:
        default: astronomerinc/ap-airflow
        type: string
      prod_docker_repo_quay_io:
        default: quay.io/astronomer/ap-airflow
        type: string
      dev_docker_repo_quay_io:
        default: "quay.io/astronomer/ap-airflow-dev"
        type: string
    steps:
      - attach_workspace:
          at: {{ workspace_prefix }}
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i '{{ workspace_prefix }}/saved-images/ap-airflow:<< parameters.tag >>.tar'
      - run:
          name: Login to DockerHub
          command: echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin docker.io
      - run:
          name: Login to Quay.io
          command: echo "$QUAY_PASSWORD" | docker login --username "$QUAY_USERNAME" --password-stdin quay.io
      - run:
          name: Push Docker image(s)
          command: |
            {% filter indent(width=12) -%}
            {% include "push.bash.j2" -%}
            {% endfilter %}
  install-yq:
    description: Install yq in a Docker container
    parameters:
      version:
        type: string
        default: v4.26.1  # update at any time
      binary:
        type: string
        default: yq_linux_amd64
    steps:
      - run:
          name: Install yq
          command: |
            wget https://github.com/mikefarah/yq/releases/download/v4.26.1/yq_linux_amd64.tar.gz -O - |  tar xz && sudo mv yq_linux_amd64 /usr/bin/yq
