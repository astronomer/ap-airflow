{%- set workspace_prefix = '/tmp/workspace' -%}
version: 2.1

workflows:
  rebase-astro-main:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "every-midnight-utc", << pipeline.schedule.name >> ]
    jobs:
      - rebase-astro-main
  certified-airflow:
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - static-checks

      - slack/on-hold:
          name: Slack-Notification
          context: slack_ap-airflow
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":tada:    *New Astronomer Certified Build*    :tada:"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Release(s) Awaiting Approval"
                  },
                  "accessory": {
                    "type": "image",
                    "image_url": "https://pbs.twimg.com/profile_images/1138094475211878400/f3rTb0hP_400x400.png",
                    "alt_text": "Astronomer.io logo"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*:\n    <https://app.circleci.com/pipelines/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME?branch=$CIRCLE_BRANCH&filter=all|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME :circleci:>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch*:\n    <https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH|`$CIRCLE_BRANCH`>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author*:\n    $CIRCLE_USERNAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Git SHA*:\n    <https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/commit/$CIRCLE_SHA1|`${CIRCLE_SHA1:0:7}`>"
                    }
                  ]
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "image",
                      "image_url": "https://api.slack.com/img/blocks/bkb_template_images/notificationsWarningIcon.png",
                      "alt_text": "notifications warning icon"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Does not include `edge` builds*"
                    }
                  ]
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "Approvers: <@UHRPL613K>,<@U018NSS9G2Y>"
                    }
                  ],
                  "accessory": {
                    "type": "button",
                    "style": "primary",
                    "text": {
                      "emoji": true,
                      "type": "plain_text",
                      "text": "Approve on CircleCI :arrow_upper_right:"
                    },
                    "url": "https://app.circleci.com/pipelines/workflows/${CIRCLE_WORKFLOW_ID}",
                    "action_id": "button-action"
                  }
                }
              ]
            }
          requires:
            - static-checks
          filters:
            branches:
              only:
                - master

      {%- for ac_version, distributions in image_map.items() %}
      {%- set airflow_version = ac_version | get_airflow_version -%}
      {%- set airflow_version_wout_dev = airflow_version | replace('.dev', '') -%}
      {%- set dev_build = "true" if "dev" in ac_version else "false" %}
      {%- set edge_build = ac_version | is_edge_build -%}
      {%- if not edge_build %}

      - pause_workflow:
          name: Need-Approval-{{ airflow_version }}
          requires:
            - Slack-Notification
          type: approval
          filters:
            branches:
              only:
                - master
      {%- for distribution in distributions %}
      - build:
          name: build-{{ airflow_version }}-{{ distribution }}
          airflow_version: {{ airflow_version }}
          distribution_name: {{ distribution }}
          dev_build: {{ dev_build }}
          {%- if "dev" in ac_version and airflow_version not in dev_allowlist %}
          extra_args:
            --build-arg VERSION=$(curl https://pip.astronomer.io/simple/astronomer-certified/latest-{{ airflow_version_wout_dev }}.build)
          {%- endif %}
          {%- if distribution in ["alpine3.10", "buster"] %}
          image_name: "ap-airflow:{{ airflow_version }}-{{ distribution }}"
          {%- else %}
          image_name: "ap-airflow:{{ airflow_version }}"
          {%- endif %}
          requires:
            - Need-Approval-{{ airflow_version }}
            - static-checks
      - scan-trivy:
          name: scan-trivy-{{ airflow_version }}-{{ distribution }}-onbuild
          airflow_version: {{ airflow_version }}
          distribution: {{ distribution }}
          distribution_name: {{ distribution }}-onbuild
          {%- if distribution in ["alpine3.10", "buster"] %}
          image_name: "ap-airflow:{{ airflow_version }}-{{ distribution }}"
          {%- else %}
          image_name: "ap-airflow:{{ airflow_version }}"
          {%- endif %}
          requires:
            - build-{{ airflow_version }}-{{ distribution }}
      - test:
          name: test-{{ airflow_version }}-{{ distribution }}-images
          {%- if distribution in ["alpine3.10", "buster"] %}
          tag: "{{ airflow_version }}-{{ distribution }}"
          {%- else %}
          tag: "{{ airflow_version }}"
          {%- endif %}
          requires:
            - build-{{ airflow_version }}-{{ distribution }}
      - push:
          name: push-{{ airflow_version }}-{{ distribution }}
          dev_build: {{ dev_build }}
          edge_build: {{ edge_build }}
          {%- if distribution in ["alpine3.10", "buster"] %}
          tag: "{{ airflow_version }}-{{ distribution }}"
          extra_tags: "{{ airflow_version }}-{{ distribution }}-${CIRCLE_BUILD_NUM},{{ ac_version }}-{{ distribution }}"
          {%- else %}
          tag: "{{ airflow_version }}"
          extra_tags: "{{ airflow_version }}-${CIRCLE_BUILD_NUM},{{ ac_version }}"
          {%- endif %}
          context:
            - quay.io
            - docker.io
          requires:
            - scan-trivy-{{ airflow_version }}-{{ distribution }}-onbuild
            - test-{{ airflow_version }}-{{ distribution }}-images
          filters:
            branches:
              only:
                - master
      - push:
          name: push-{{ airflow_version }}-{{ distribution }}-onbuild
          dev_build: {{ dev_build }}
          edge_build: {{ edge_build }}
          {%- if distribution in ["alpine3.10", "buster"] %}
          tag: "{{ airflow_version }}-{{ distribution }}-onbuild"
          extra_tags: "{{ airflow_version }}-{{ distribution }}-onbuild-${CIRCLE_BUILD_NUM},{{ ac_version }}-{{ distribution }}-onbuild"
          {%- else %}
          tag: "{{ airflow_version }}-onbuild"
          extra_tags: "{{ airflow_version }}-onbuild-${CIRCLE_BUILD_NUM},{{ ac_version }}-onbuild"
          {%- endif %}
          context:
            - quay.io
            - docker.io
          requires:
            - scan-trivy-{{ airflow_version }}-{{ distribution }}-onbuild
            - test-{{ airflow_version }}-{{ distribution }}-images
          filters:
            branches:
              only:
                - master
                - slack-build-approvals
      {%- if "dev" in ac_version and airflow_version not in dev_allowlist %}
      - slack-notification:
          name: slack-notification-{{ airflow_version }}-{{ distribution }}-onbuild
          dev_build: {{ dev_build }}
          airflow_version: "{{ airflow_version }}"
          {%- if distribution in ["alpine3.10", "buster"] %}
          tag: "{{ airflow_version }}-{{ distribution }}-onbuild"
          extra_tags: "{{ airflow_version }}-{{ distribution }}-onbuild-${CIRCLE_BUILD_NUM},{{ ac_version }}-{{ distribution }}-onbuild"
          {%- else %}
          tag: "{{ airflow_version }}-onbuild"
          extra_tags: "{{ airflow_version }}-onbuild-${CIRCLE_BUILD_NUM},{{ ac_version }}-onbuild"
          {%- endif %}
          context:
            - slack_ap-airflow
          requires:
            - push-{{ airflow_version }}-{{ distribution }}-onbuild
          filters:
            branches:
              only:
                - master
      {%- endif %}
      {%- endfor %}{# distribution in distributions #}
      {%- endif %}{# not edge_build #}
      {%- endfor %}{# ac_version, distributions in image_map.items() #}
  {%- if image_map.keys() | dev_releases | length > 0 %}
  nightly:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "every-midnight-utc", << pipeline.schedule.name >> ]
    jobs:
      {%- for ac_version, distributions in image_map.items() %}
      {%- set airflow_version = ac_version | get_airflow_version %}
      {%- set airflow_version_wout_dev = airflow_version | replace('.dev', '') -%}
      {%- set edge_build = ac_version | is_edge_build -%}
      {%- set ext_build_filename = 'latest-' + airflow_version_wout_dev + '.build.json' %}
      {%- set ext_build_filename_workspace = workspace_prefix + '/latest-' + airflow_version_wout_dev + '.build.json' %}
      {%- if "dev" in ac_version and airflow_version not in dev_allowlist  %}

      {%- if edge_build %}
      - download-file:
          name: download-latest-{{ airflow_version_wout_dev }}-build-info
          url: https://pip.astronomer.io/simple/astronomer-certified/{{ ext_build_filename }}
          file: {{ ext_build_filename }}
          output_file: extra-tags-{{ airflow_version_wout_dev }}.txt
      {%- endif %}{# edge_build #}

      {%- for distribution in distributions %}
      - build:
          name: build-{{ airflow_version }}-{{ distribution }}
          airflow_version: {{ airflow_version }}
          distribution_name: {{ distribution }}
          dev_build: true
          extra_args:
            {%- if not edge_build %}
            --build-arg VERSION=$(curl https://pip.astronomer.io/simple/astronomer-certified/latest-{{ airflow_version_wout_dev }}.build)
            {%- else %}
            --build-arg VERSION=$(jq -r '.output.astronomer_certified.package.version' <{{ ext_build_filename_workspace }})
            --label org.apache.airflow.ci.build.date=$(jq -r '.date' <{{ ext_build_filename_workspace }})
            --label org.apache.airflow.ci.build.url=$(jq -r '.github.run.url' <{{ ext_build_filename_workspace }})
            --label org.apache.airflow.ci.build.version=$(jq -r '.output.airflow.package.version' <{{ ext_build_filename_workspace }})
            --label org.apache.airflow.ci.js.node.version_string=$(jq -r '.js.node.version' <{{ ext_build_filename_workspace }})
            --label org.apache.airflow.ci.js.npm.version_string=$(jq -r '.js.npm.version' <{{ ext_build_filename_workspace }})
            --label org.apache.airflow.ci.js.yarn.version_string=$(jq -r '.js.yarn.version' <{{ ext_build_filename_workspace }})
            --label org.apache.airflow.ci.python.version_string="$(jq -r '.python.version' <{{ ext_build_filename_workspace }})"
            --label org.apache.airflow.git.commit_sha=$(jq -r '.git.commit' <{{ ext_build_filename_workspace }})
            --label org.apache.airflow.git.$(jq -r '.git.ref.type' <{{ ext_build_filename_workspace }})=$(jq -r '.git.ref.name' <{{ ext_build_filename_workspace }})
            --label io.astronomer.astronomer_certified.build.version=$(jq -r '.output.astronomer_certified.package.version' <{{ ext_build_filename_workspace }})
            {%- endif %}{# edge_build #}
          {%- if distribution in ["alpine3.10", "buster"] %}
          image_name: "ap-airflow:{{ airflow_version }}-{{ distribution }}"
          {%- else %}
          image_name: "ap-airflow:{{ airflow_version }}"
          {%- endif %}
          {%- if edge_build %}
          requires:
            - download-latest-{{ airflow_version_wout_dev }}-build-info
          {%- endif %}
      - scan-trivy:
          name: scan-trivy-{{ airflow_version }}-{{ distribution }}-onbuild
          airflow_version: {{ airflow_version }}
          distribution: {{ distribution }}
          distribution_name: {{ distribution }}-onbuild
          {%- if distribution in ["alpine3.10", "buster"] %}
          image_name: "ap-airflow:{{ airflow_version }}-{{ distribution }}"
          {%- else %}
          image_name: "ap-airflow:{{ airflow_version }}"
          {%- endif %}
          requires:
            - build-{{ airflow_version }}-{{ distribution }}
      - test:
          name: test-{{ airflow_version }}-{{ distribution }}-images
          {%- if distribution in ["alpine3.10", "buster"] %}
          tag: "{{ airflow_version }}-{{ distribution }}"
          {%- else %}
          tag: "{{ airflow_version }}"
          {%- endif %}
          requires:
            - build-{{ airflow_version }}-{{ distribution }}
      - push:
          name: push-{{ airflow_version }}-{{ distribution }}
          dev_build: true
          edge_build: {{ edge_build }}
          {%- if distribution in ["alpine3.10", "buster"] %}
          tag: "{{ airflow_version }}-{{ distribution }}"
          extra_tags: "{{ airflow_version }}-{{ distribution }}-${CIRCLE_BUILD_NUM}"
          {%- else %}
          tag: "{{ airflow_version }}"
          extra_tags: "{{ airflow_version }}-${CIRCLE_BUILD_NUM}"
          {%- endif %}{# distribution in ["alpine3.10", "buster"] #}
          {%- if edge_build %}
          extra_tags_file: {{ workspace_prefix }}/extra-tags-{{ airflow_version_wout_dev }}.txt
          {%- endif %}{# edge_build #}
          context:
            - quay.io
            - docker.io
            - qa
          requires:
            - scan-trivy-{{ airflow_version }}-{{ distribution }}-onbuild
            - test-{{ airflow_version }}-{{ distribution }}-images
          filters:
            branches:
              only:
                - master
      - push:
          name: push-{{ airflow_version }}-{{ distribution }}-onbuild
          dev_build: true
          edge_build: {{ edge_build }}
          {%- if distribution in ["alpine3.10", "buster"] %}
          tag: "{{ airflow_version }}-{{ distribution }}-onbuild"
          extra_tags: "{{ airflow_version }}-{{ distribution }}-onbuild-${CIRCLE_BUILD_NUM},{{ ac_version }}-{{ distribution }}-onbuild"
          {%- else %}
          tag: "{{ airflow_version }}-onbuild"
          extra_tags: "{{ airflow_version }}-onbuild-${CIRCLE_BUILD_NUM},{{ ac_version }}-onbuild"
          {%- endif %}
          context:
            - quay.io
            - docker.io
            - qa
          requires:
            - scan-trivy-{{ airflow_version }}-{{ distribution }}-onbuild
            - test-{{ airflow_version }}-{{ distribution }}-images
          filters:
            branches:
              only:
                - master
      {%- endfor %}{# distribution in distributions #}
      {%- endif %}{# if "dev" in ac_version and airflow_version not in dev_allowlist #}
      {%- endfor %}{# ac_version, distributions in image_map.items() #}
  {%- endif %}{# image_map.keys() | dev_releases | length > 0 #}

jobs:
  rebase-astro-main:
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - add_ssh_keys:
          fingerprints:
            - "11:0b:15:6b:f2:77:3e:93:c5:83:0e:8a:0a:93:2e:7e"
      - run:
          name: Rebase astronomer/airflow:astro-main onto main
          command: |
            export GIT_SSH_COMMAND="ssh -o IdentitiesOnly=yes -i $HOME/.ssh/id_rsa_110b156bf2773e93c5830e8a0a932e7e"
            git clone git@github.com:astronomer/airflow.git
            cd airflow
            git config user.name "astronomer/ap-airflow GitHub:CircleCI integration"
            git config user.email "astronomer@users.noreply.github.com"
            git branch --verbose
            git fetch --all
            git checkout astro-main
            git --no-pager log --max-count 4
            git rebase main
            git --no-pager log --max-count 4
            git push --force origin astro-main
            git --no-pager remote --verbose
  static-checks:
    executor: machine-executor
    description: Static Checks
    steps:
      - checkout
      - run:
          name: Load archived Docker image
          command: |
            pyenv global 3.8.5
            pip install -r .circleci/test-requirements.txt
            pre-commit run --all-files || { git --no-pager diff && false ; }
  download-file:
    executor: machine-executor
    description: Download a file to disk
    parameters:
      url:
        description: The full URL to download from
        type: string
      file:
        description: The output file to write to (existing files will be overwritten)
        type: string
      output_file:
        description: The file to write
        type: string
    steps:
      - run:
          name: Downloading file with curl
          command: |
            curl << parameters.url >> > << parameters.file >>
            # Avoid polluting logs with a huge file - <= 100 lines or <= 2048 bytes
            if [[ "$(wc -l << parameters.file >>)" -le 100 || "$(wc -c)" -le 2048 ]]; then
              echo "Output file:"
              cat << parameters.file >>
            else
              echo "Emitting output file would pollute logs; skipping"
            fi
      - run:
          name: Writing extra steps file
          command: |
            echo "Input JSON file:"
            cat << parameters.file >>
            jq --raw-output '.output.astronomer_certified.package.version' < << parameters.file >> > << parameters.output_file >>
            echo "Output newline-separated file:"
            cat << parameters.output_file >>
      - persist_to_workspace:
          root: .
          paths:
            - << parameters.output_file >>
            - << parameters.file >>
  build:
    executor: docker-executor
    description: Build Airflow images
    parameters:
      airflow_version:
        description: "The Airflow version, for example '1.10.5'"
        type: string
      distribution_name:
        description: "The base distribution of the container"
        type: string
      dev_build:
        description: "Indicate if this is a dev build"
        type: boolean
      extra_args:
        description: "Extra args to pass to pass to Docker build command"
        default: ""
        type: string
      image_name:
        type: string
        default: "ap-airflow:2.2.0"
    steps:
      - docker-build-base-and-onbuild:
          airflow_version: "<< parameters.airflow_version >>"
          distribution_name: "<< parameters.distribution_name >>"
          extra_args: "<< parameters.extra_args >>"
          image_name: "<< parameters.image_name >>"
  test:
    executor: machine-executor
    description: Test Airflow images
    parameters:
      tag:
        type: string
    steps:
      - airflow-image-test:
          tag: "<< parameters.tag >>"
  scan-trivy:
    docker:
      - image: docker:18.09-git
    description: "Trivy: Vulnerability scanner a Docker image"
    parameters:
      airflow_version:
        description: "The Airflow version, for example '1.10.5'"
        type: string
      distribution_name:
        description: "The base distribution of the container"
        type: string
      distribution:
        description: "The distribution without onbuild"
        type: string
      image_name:
        type: string
        default: "ap-airflow:2.2.0"
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: {{ workspace_prefix }}
      - run:
          name: Load archived Docker image
          command: docker load -i {{ workspace_prefix }}/saved-images/<< parameters.image_name >>-onbuild.tar
      - run:
          name: Install trivy
          command: |
            apk add --update-cache --upgrade curl rpm
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/master/contrib/install.sh | sh -s -- -b /usr/local/bin
      - restore_cache:
          keys:
            - trivy-cache
      - run:
          name: Scan the local image with trivy
          command: |
            trivy \
              --ignorefile "./<< parameters.airflow_version >>/<< parameters.distribution >>/trivyignore" \
              --cache-dir {{ workspace_prefix }}/trivy-cache \
              --ignore-unfixed -s HIGH,CRITICAL \
              --exit-code 1 \
              --no-progress "<< parameters.image_name >>-onbuild"
      - save_cache:
          key: trivy-cache
          paths:
            - {{ workspace_prefix }}/trivy-cache
  push:
    executor: docker-executor
    description: Push Airflow images
    parameters:
      dev_build:
        description: "Indicate if this is a dev build"
        type: boolean
      edge_build:
        description: "Indicate if this is an edge build"
        type: boolean
      tag:
        type: string
      extra_tags:
        type: string
        default: ""
      extra_tags_file:
        description: ""
        type: string
        default: ""
      prod_docker_repo_docker_hub:
        description: "The docker repo to tag and push to, for example 'quay.io/astronomer/ap-airflow'"
        default: "astronomerinc/ap-airflow"
        type: string
      prod_docker_repo_quay_io:
        description: "The docker repo to tag and push to, for example 'quay.io/astronomer/ap-airflow'"
        default: "quay.io/astronomer/ap-airflow"
        type: string
      dev_docker_repo_quay_io:
        description: "The docker repo to tag and push to, for example 'quay.io/astronomer/ap-airflow'"
        default: "quay.io/astronomer/ap-airflow-dev"
        type: string
    steps:
      - attach_workspace:
          at: {{ workspace_prefix }}
      - push:
          dev_release: << parameters.dev_build >>
          edge_build: << parameters.edge_build >>
          extra_tags: "<< parameters.extra_tags >>"
          extra_tags_file: "<< parameters.extra_tags_file >>"
          tag: "<< parameters.tag >>"
          prod_docker_repo_docker_hub: "<< parameters.prod_docker_repo_docker_hub >>"
          prod_docker_repo_quay_io: "<< parameters.prod_docker_repo_quay_io >>"
          dev_docker_repo_quay_io: "<< parameters.dev_docker_repo_quay_io >>"

  slack-notification:
    executor: docker-executor
    description: Push Airflow images
    parameters:
      dev_build:
        description: "Indicate if this is a dev build"
        type: boolean
      airflow_version:
        type: string
      tag:
        type: string
      extra_tags:
        type: string
        default: ""
    steps:
      - slack/notify:
          branch_pattern: master,push_tags_db
          channel: airflow-ac-build-tags
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":tada:    *New Astronomer Certified DEV Build*    :tada:"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<< parameters.airflow_version >> Development Image(s) Released"
                  },
                  "accessory": {
                    "type": "image",
                    "image_url": "https://res.cloudinary.com/practicaldev/image/fetch/s--dPhPEZO8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/crazy-max/diun/master/.res/diun.png",
                    "alt_text": "Docker Image"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Image Registry*:\n    <https://quay.io/repository/astronomer/ap-airflow-dev?tag=latest&tab=tags|ap-airflow-dev>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Tags*:\n    << parameters.extra_tags >>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author*:\n    $CIRCLE_USERNAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Git SHA*:\n    <https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/commit/$CIRCLE_SHA1|`${CIRCLE_SHA1:0:7}`>"
                    }
                  ]
                },
                {
                  "type": "divider"
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "plain_text",
                      "text": "Release Owners: Airflow Team [<@UHRPL613K>,<@U01PS0N06DN>]",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
orbs:
  slack: circleci/slack@4.4.4
  clair-scanner: ovotech/clair-scanner@1.6.0
executors:
  docker-executor:
    docker:
      - image: circleci/python:3
  machine-executor:
    machine:
      image: ubuntu-2004:202010-01

commands:
  docker-build-base-and-onbuild:
    description: "Build Airflow images to use with the Astronomer platform"
    parameters:
      airflow_version:
        type: string
        default: "1.10.5"
      distribution_name:
        type: string
        default: alpine
      extra_args:
        description: "Extra args to pass to pass to Docker build command"
        default: ""
        type: string
      image_name:
        type: string
        default: "ap-airflow:2.2.0"
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - docker-build:
          image_name: "<< parameters.image_name >>"
          path: "<< parameters.airflow_version >>/<< parameters.distribution_name >>"
          extra_args: "<< parameters.extra_args >>"
      - docker-build:
          image_name: "<< parameters.image_name >>-onbuild"
          path: "common/"
          dockerfile: "Dockerfile.onbuild-<< parameters.distribution_name >>"
          extra_args: "--build-arg baseimage=<< parameters.image_name >>"
      - persist_to_workspace:
          root: .
          paths:
            - saved-images/
  docker-build:
    description: "Build a Docker image"
    parameters:
      dockerfile:
        type: string
        default: Dockerfile
      path:
        type: string
        default: "."
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
      extra_args:
        type: string
        default: ""
    steps:
      - attach_workspace:
          at: {{ workspace_prefix }}
      - run:
          name: Build the Docker image
          command: |
            set -xe
            mkdir -p saved-images/"$(dirname '<< parameters.image_name >>')"
            docker build \
              --tag '<< parameters.image_name >>' \
              --label io.astronomer.docker.build_time="$(date +%s)" \
              --label io.astronomer.repo.commit_sha="${CIRCLE_SHA1}" \
              --label io.astronomer.repo.url="${CIRCLE_REPOSITORY_URL}" \
              --label io.astronomer.ci.build_url="${CIRCLE_BUILD_URL}" \
              --file '<< parameters.path>>/<< parameters.dockerfile >>' \
              --build-arg "BUILD_NUMBER=${CIRCLE_BUILD_NUM}" \
              --build-arg "REPO_BRANCH=${CIRCLE_BRANCH}" \
              << parameters.extra_args >> '<< parameters.path >>'
            docker save -o saved-images/<< parameters.image_name >>.tar '<< parameters.image_name >>'
            docker inspect << parameters.image_name >>
  airflow-image-test:
    description: Test an Airflow image
    parameters:
      tag:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: {{ workspace_prefix }}
      - run:
          name: Load archived Airflow Docker image
          command: |
            docker load -i {{ workspace_prefix }}/saved-images/ap-airflow:<< parameters.tag >>.tar
            docker load -i {{ workspace_prefix }}/saved-images/ap-airflow:<< parameters.tag >>-onbuild.tar
      - run:
          name: Test Airflow Docker images (Base + Onbuild)
          command: |
            set -e
            pyenv global 3.8.5
            pip install -r .circleci/test-requirements.txt
            .circleci/bin/test-airflow 'ap-airflow' '<< parameters.tag >>'
      - store_test_results:
          path: /tmp/test-reports
  push:
    description: "Push a Docker image to DockerHub"
    parameters:
      dev_release:
        description: "Indicate if this is a dev release"
        default: true
        type: boolean
      edge_build:
        description: "Indicate if this is an edge build"
        type: boolean
      extra_tags:
        type: string
        default: ""
      extra_tags_file:
        description: "File containing additional tags, one per line"
        type: string
        default: ""
      tag:
        type: string
      image_name:
        default: ap-airflow
        type: string
      prod_docker_repo_docker_hub:
        default: astronomerinc/ap-airflow
        type: string
      prod_docker_repo_quay_io:
        default: quay.io/astronomer/ap-airflow
        type: string
      dev_docker_repo_quay_io:
        default: "quay.io/astronomer/ap-airflow-dev"
        type: string
    steps:
      - attach_workspace:
          at: {{ workspace_prefix }}
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i '{{ workspace_prefix }}/saved-images/ap-airflow:<< parameters.tag >>.tar'
      - run:
          name: Login to DockerHub
          command: echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin docker.io
      - run:
          name: Login to Quay.io
          command: echo "$QUAY_PASSWORD" | docker login --username "$QUAY_USERNAME" --password-stdin quay.io
      - run:
          name: Push Docker image(s)
          command: |
            set -e
            image="ap-airflow:<< parameters.tag >>"
            set -x
            export NEW_POINT_RELEASE=true

            IFS="," read -ra DOCKER_TAGS \<<< "<< parameters.extra_tags >>"

            echo "DOCKER_TAGS: ${DOCKER_TAGS[@]}"

            # Read in more tags from the extra_tags_file, if it exists
            if [[ -f "<< parameters.extra_tags_file >>" ]]; then
              echo "Contents of << parameters.extra_tags_file >>:"
              cat "<< parameters.extra_tags_file >>"

              while read tag;
              do
                DOCKER_TAGS+=($tag)
              done < "<< parameters.extra_tags_file >>"

              echo "DOCKER_TAGS:"
              echo "${DOCKER_TAGS[@]}"
            fi

            for tag in "${DOCKER_TAGS[@]}";
            do
              if DOCKER_CLI_EXPERIMENTAL=enabled docker manifest inspect "<< parameters.prod_docker_repo_docker_hub >>:$tag" >/dev/null 2>&1; then
                echo "Image with Tag ("<< parameters.prod_docker_repo_docker_hub >>:$tag") already exists"
                export NEW_POINT_RELEASE=false

              elif [[ "$tag" == "<< parameters.tag >>-$CIRCLE_BUILD_NUM" ]] || <<parameters.dev_release >> ; then
                echo "Tagging and pushing image <<parameters.image_name>>:$tag to << parameters.dev_docker_repo_quay_io >>"
                docker tag "$image" "<< parameters.dev_docker_repo_quay_io >>:${tag}"
                docker push "<< parameters.dev_docker_repo_quay_io >>:${tag}"

                if [[ "${tag}" == *"onbuild-"* && <<parameters.dev_release >> ]]; then
                  release="$( cut -d '-' -f 1 \<<< "$tag" )"
                  sudo apt-get install postgresql postgresql-contrib
                  echo "UPSERT the latest tag '${tag}' for '${release}' into the QA DB"

                  # Connect to the database, run the query, then disconnect
                  PGPASSWORD="$QA_RELEASEINFO_PASSWORD" \
                  psql --tuples-only \
                       --no-align \
                       --host="$QA_RELEASEINFO_HOST" \
                       --port=5432 \
                       --dbname="$QA_RELEASEINFO_DATABASE" \
                       --username="$QA_RELEASEINFO_USERNAME" \
                       --command="INSERT INTO tag_version (version_1,    latest_tag, previous_tag, is_latest)
                                       VALUES             ('${release}', '${tag}',   NULL,         << parameters.edge_build >>)
                                  ON CONFLICT (version_1)
                                  DO UPDATE SET   latest_tag = EXCLUDED.latest_tag,
                                                previous_tag = tag_version.latest_tag;"
                fi

              else
                echo "Tagging and pushing image <<parameters.image_name>>:$tag to << parameters.prod_docker_repo_quay_io >>"
                docker tag "$image" "<< parameters.prod_docker_repo_quay_io >>:${tag}"
                docker push "<< parameters.prod_docker_repo_quay_io >>:${tag}"

                echo "Tagging and pushing image <<parameters.image_name>>:$tag to << parameters.prod_docker_repo_docker_hub >>"
                docker tag "$image" "<< parameters.prod_docker_repo_docker_hub >>:${tag}"
                docker push "<< parameters.prod_docker_repo_docker_hub >>:${tag}"

                echo "Tagging and pushing image <<parameters.image_name>>:$tag to << parameters.dev_docker_repo_quay_io >>"
                docker tag "$image" "<< parameters.dev_docker_repo_quay_io >>:${tag}"
                docker push "<< parameters.dev_docker_repo_quay_io >>:${tag}"

              fi
            done

            # The following code block publishes Moving Master builds (e.g. 1.10.13-buster-onbuild)
            # as compared to above code-blocks that publish images with build-number & immutable tag
            # e.g (e.g. 1.10.13-1-buster-onbuild and 1.10.13-buster-onbuild-24119)
            if $NEW_POINT_RELEASE ; then
              if ! <<parameters.dev_release >> ; then
                # If it is not a Dev Release publish the image to Prod Repos
                echo "Tagging and pushing image <<parameters.image_name>>:<< parameters.tag >> to << parameters.prod_docker_repo_quay_io >>"
                docker tag "$image" "<< parameters.prod_docker_repo_quay_io >>:<< parameters.tag >>"
                docker push "<< parameters.prod_docker_repo_quay_io >>:<< parameters.tag >>"

                echo "Tagging and pushing image <<parameters.image_name>>:<< parameters.tag >> to << parameters.prod_docker_repo_docker_hub >>"
                docker tag "$image" "<< parameters.prod_docker_repo_docker_hub >>:<< parameters.tag >>"
                docker push "<< parameters.prod_docker_repo_docker_hub >>:<< parameters.tag >>"
              fi

              echo "Tagging and pushing image <<parameters.image_name>>:<< parameters.tag >> to << parameters.dev_docker_repo_quay_io >>"
              docker tag "$image" "<< parameters.dev_docker_repo_quay_io >>:<< parameters.tag >>"
              docker push "<< parameters.dev_docker_repo_quay_io >>:<< parameters.tag >>"
            else
              echo "Image with Tag ($image) not pushed as it is not a new point release"
            fi
            set +x
